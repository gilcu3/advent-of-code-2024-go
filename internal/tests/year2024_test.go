// Code generated by aocgen; DO NOT EDIT.
package tests

import (
	"fmt"
	"testing"

	"aocgen/internal/aoc"
	"aocgen/internal/util"
)

func Benchmark202401(b *testing.B) {
	aoc.RegisterYears()
	input := util.TestInput(2024, 1)
	p := aoc.NewPuzzle(2024, 1)
	if p.Part1(input) != fmt.Sprint(nil) {
		b.Run("Part1", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part1(input)
			}
		})
	}
	if p.Part2(input) != fmt.Sprint(nil) {
		b.Run("Part2", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part2(input)
			}
		})
	}
}
func Benchmark202402(b *testing.B) {
	aoc.RegisterYears()
	input := util.TestInput(2024, 2)
	p := aoc.NewPuzzle(2024, 2)
	if p.Part1(input) != fmt.Sprint(nil) {
		b.Run("Part1", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part1(input)
			}
		})
	}
	if p.Part2(input) != fmt.Sprint(nil) {
		b.Run("Part2", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part2(input)
			}
		})
	}
}
func Benchmark202403(b *testing.B) {
	aoc.RegisterYears()
	input := util.TestInput(2024, 3)
	p := aoc.NewPuzzle(2024, 3)
	if p.Part1(input) != fmt.Sprint(nil) {
		b.Run("Part1", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part1(input)
			}
		})
	}
	if p.Part2(input) != fmt.Sprint(nil) {
		b.Run("Part2", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part2(input)
			}
		})
	}
}
func Benchmark202404(b *testing.B) {
	aoc.RegisterYears()
	input := util.TestInput(2024, 4)
	p := aoc.NewPuzzle(2024, 4)
	if p.Part1(input) != fmt.Sprint(nil) {
		b.Run("Part1", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part1(input)
			}
		})
	}
	if p.Part2(input) != fmt.Sprint(nil) {
		b.Run("Part2", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part2(input)
			}
		})
	}
}
func Benchmark202405(b *testing.B) {
	aoc.RegisterYears()
	input := util.TestInput(2024, 5)
	p := aoc.NewPuzzle(2024, 5)
	if p.Part1(input) != fmt.Sprint(nil) {
		b.Run("Part1", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part1(input)
			}
		})
	}
	if p.Part2(input) != fmt.Sprint(nil) {
		b.Run("Part2", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part2(input)
			}
		})
	}
}
func Benchmark202406(b *testing.B) {
	aoc.RegisterYears()
	input := util.TestInput(2024, 6)
	p := aoc.NewPuzzle(2024, 6)
	if p.Part1(input) != fmt.Sprint(nil) {
		b.Run("Part1", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part1(input)
			}
		})
	}
	if p.Part2(input) != fmt.Sprint(nil) {
		b.Run("Part2", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part2(input)
			}
		})
	}
}
func Benchmark202407(b *testing.B) {
	aoc.RegisterYears()
	input := util.TestInput(2024, 7)
	p := aoc.NewPuzzle(2024, 7)
	if p.Part1(input) != fmt.Sprint(nil) {
		b.Run("Part1", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part1(input)
			}
		})
	}
	if p.Part2(input) != fmt.Sprint(nil) {
		b.Run("Part2", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part2(input)
			}
		})
	}
}
func Benchmark202408(b *testing.B) {
	aoc.RegisterYears()
	input := util.TestInput(2024, 8)
	p := aoc.NewPuzzle(2024, 8)
	if p.Part1(input) != fmt.Sprint(nil) {
		b.Run("Part1", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part1(input)
			}
		})
	}
	if p.Part2(input) != fmt.Sprint(nil) {
		b.Run("Part2", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part2(input)
			}
		})
	}
}
func Benchmark202409(b *testing.B) {
	aoc.RegisterYears()
	input := util.TestInput(2024, 9)
	p := aoc.NewPuzzle(2024, 9)
	if p.Part1(input) != fmt.Sprint(nil) {
		b.Run("Part1", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part1(input)
			}
		})
	}
	if p.Part2(input) != fmt.Sprint(nil) {
		b.Run("Part2", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part2(input)
			}
		})
	}
}
func Benchmark202410(b *testing.B) {
	aoc.RegisterYears()
	input := util.TestInput(2024, 10)
	p := aoc.NewPuzzle(2024, 10)
	if p.Part1(input) != fmt.Sprint(nil) {
		b.Run("Part1", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part1(input)
			}
		})
	}
	if p.Part2(input) != fmt.Sprint(nil) {
		b.Run("Part2", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part2(input)
			}
		})
	}
}
func Benchmark202411(b *testing.B) {
	aoc.RegisterYears()
	input := util.TestInput(2024, 11)
	p := aoc.NewPuzzle(2024, 11)
	if p.Part1(input) != fmt.Sprint(nil) {
		b.Run("Part1", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part1(input)
			}
		})
	}
	if p.Part2(input) != fmt.Sprint(nil) {
		b.Run("Part2", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part2(input)
			}
		})
	}
}
func Benchmark202412(b *testing.B) {
	aoc.RegisterYears()
	input := util.TestInput(2024, 12)
	p := aoc.NewPuzzle(2024, 12)
	if p.Part1(input) != fmt.Sprint(nil) {
		b.Run("Part1", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part1(input)
			}
		})
	}
	if p.Part2(input) != fmt.Sprint(nil) {
		b.Run("Part2", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part2(input)
			}
		})
	}
}
func Benchmark202413(b *testing.B) {
	aoc.RegisterYears()
	input := util.TestInput(2024, 13)
	p := aoc.NewPuzzle(2024, 13)
	if p.Part1(input) != fmt.Sprint(nil) {
		b.Run("Part1", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part1(input)
			}
		})
	}
	if p.Part2(input) != fmt.Sprint(nil) {
		b.Run("Part2", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part2(input)
			}
		})
	}
}
func Benchmark202414(b *testing.B) {
	aoc.RegisterYears()
	input := util.TestInput(2024, 14)
	p := aoc.NewPuzzle(2024, 14)
	if p.Part1(input) != fmt.Sprint(nil) {
		b.Run("Part1", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part1(input)
			}
		})
	}
	if p.Part2(input) != fmt.Sprint(nil) {
		b.Run("Part2", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part2(input)
			}
		})
	}
}
func Benchmark202415(b *testing.B) {
	aoc.RegisterYears()
	input := util.TestInput(2024, 15)
	p := aoc.NewPuzzle(2024, 15)
	if p.Part1(input) != fmt.Sprint(nil) {
		b.Run("Part1", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part1(input)
			}
		})
	}
	if p.Part2(input) != fmt.Sprint(nil) {
		b.Run("Part2", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part2(input)
			}
		})
	}
}
func Benchmark202416(b *testing.B) {
	aoc.RegisterYears()
	input := util.TestInput(2024, 16)
	p := aoc.NewPuzzle(2024, 16)
	if p.Part1(input) != fmt.Sprint(nil) {
		b.Run("Part1", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part1(input)
			}
		})
	}
	if p.Part2(input) != fmt.Sprint(nil) {
		b.Run("Part2", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part2(input)
			}
		})
	}
}
func Benchmark202417(b *testing.B) {
	aoc.RegisterYears()
	input := util.TestInput(2024, 17)
	p := aoc.NewPuzzle(2024, 17)
	if p.Part1(input) != fmt.Sprint(nil) {
		b.Run("Part1", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part1(input)
			}
		})
	}
	if p.Part2(input) != fmt.Sprint(nil) {
		b.Run("Part2", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part2(input)
			}
		})
	}
}
func Benchmark202418(b *testing.B) {
	aoc.RegisterYears()
	input := util.TestInput(2024, 18)
	p := aoc.NewPuzzle(2024, 18)
	if p.Part1(input) != fmt.Sprint(nil) {
		b.Run("Part1", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part1(input)
			}
		})
	}
	if p.Part2(input) != fmt.Sprint(nil) {
		b.Run("Part2", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part2(input)
			}
		})
	}
}
func Benchmark202419(b *testing.B) {
	aoc.RegisterYears()
	input := util.TestInput(2024, 19)
	p := aoc.NewPuzzle(2024, 19)
	if p.Part1(input) != fmt.Sprint(nil) {
		b.Run("Part1", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part1(input)
			}
		})
	}
	if p.Part2(input) != fmt.Sprint(nil) {
		b.Run("Part2", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part2(input)
			}
		})
	}
}
func Benchmark202420(b *testing.B) {
	aoc.RegisterYears()
	input := util.TestInput(2024, 20)
	p := aoc.NewPuzzle(2024, 20)
	if p.Part1(input) != fmt.Sprint(nil) {
		b.Run("Part1", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part1(input)
			}
		})
	}
	if p.Part2(input) != fmt.Sprint(nil) {
		b.Run("Part2", func(b *testing.B) {
			b.ResetTimer()
			for i := 0; i < b.N; i++ {
				p.Part2(input)
			}
		})
	}
}
